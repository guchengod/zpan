<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="im.zhaojun.zfile.module.storage.mapper.StorageSourceMapper">
  <resultMap id="BaseResultMap" type="im.zhaojun.zfile.module.storage.model.entity.StorageSource">
    <!--@mbg.generated-->
    <!--@Table "storage_source"-->
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="enable" jdbcType="BIT" property="enable" />
    <result column="enable_cache" jdbcType="BIT" property="enableCache" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="auto_refresh_cache" jdbcType="BIT" property="autoRefreshCache" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="search_enable" jdbcType="BIT" property="searchEnable" />
    <result column="search_ignore_case" jdbcType="BIT" property="searchIgnoreCase" />
    <result column="order_num" jdbcType="INTEGER" property="orderNum" />
    <result column="default_switch_to_img_mode" jdbcType="BIT" property="defaultSwitchToImgMode" />
    <result column="remark" jdbcType="VARCHAR" property="remark" />
    <result column="key" jdbcType="VARCHAR" property="key" />
    <result column="enable_file_operator" jdbcType="VARCHAR" property="enableFileOperator" />
    <result column="search_mode" jdbcType="VARCHAR" property="searchMode" />
    <result column="enable_file_anno_operator" jdbcType="BIT" property="enableFileAnnoOperator" /><result column="compatibility_readme" jdbcType="BIT" property="compatibilityReadme" />
  </resultMap>

    <!-- 修改动态列名引号部分 -->
    <sql id="Column_Wrap">
        <choose><when test="_databaseId == 'postgresql'">"</when><otherwise>`</otherwise></choose>
    </sql>

    <!-- 动态列名引用 -->
    <sql id="Column_Key">
        <choose>
            <when test="_databaseId == 'postgresql'">"key"</when>
            <otherwise>`key`</otherwise>
        </choose>
    </sql>
    <sql id="Column_Type"><include refid="Column_Wrap"/>type<include refid="Column_Wrap"/></sql>
    <sql id="Column_Enable"><include refid="Column_Wrap"/>enable<include refid="Column_Wrap"/></sql>
    <sql id="Column_OrderNum"><include refid="Column_Wrap"/>order_num<include refid="Column_Wrap"/></sql>

    <!-- 动态函数（IFNULL/COALESCE） -->
    <sql id="Func_IfNull"><choose><when test="_databaseId == 'mysql'">IFNULL</when><otherwise>COALESCE</otherwise></choose></sql>

  <sql id="Base_Column_List">
    <!--@mbg.generated-->
      <choose>
          <when test="_databaseId == 'mysql'">
              `id`, `enable`, `enable_cache`, `name`, `auto_refresh_cache`, `type`, `search_enable`,`search_ignore_case`, `order_num`, `default_switch_to_img_mode`,`remark`, `key`, `enable_file_operator`, `search_mode`, `enable_file_anno_operator`, `compatibility_readme`
          </when>
          <when test="_databaseId == 'postgresql'">
              "id", "enable", "enable_cache", "name", "auto_refresh_cache", "type", "search_enable","search_ignore_case", "order_num", "default_switch_to_img_mode","remark", "key", "enable_file_operator","search_mode", "enable_file_anno_operator", "compatibility_readme"
          </when>
          <otherwise> <!-- SQLite 默认用反引号 -->
              `id`, `enable`, `enable_cache`, `name`, `auto_refresh_cache`, `type`, `search_enable`,`search_ignore_case`, `order_num`, `default_switch_to_img_mode`,`remark`, `key`, `enable_file_operator`, `search_mode`, `enable_file_anno_operator`, `compatibility_readme`
          </otherwise>
      </choose>
  </sql>


    <!-- 修改 findAllOrderByOrderNum 查询 -->
    <select id="findAllOrderByOrderNum" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" /> 
        FROM storage_source 
        ORDER BY 
        <choose>
            <when test="_databaseId == 'postgresql'">
                COALESCE("order_num", -1)
            </when>
            <otherwise>
                IFNULL(`order_num`, -1)
            </otherwise>
        </choose>, id DESC
    </select>

    <!-- 修改 findListByEnableOrderByOrderNum 查询 -->
    <select id="findListByEnableOrderByOrderNum" resultMap="BaseResultMap">
        SELECT 
            "id", "enable", "enable_cache", "name", "auto_refresh_cache", 
            "type", "search_enable", "search_ignore_case", "order_num", 
            "default_switch_to_img_mode", "remark", "key", "enable_file_operator",
            "search_mode", "enable_file_anno_operator", "compatibility_readme"
        FROM storage_source
        WHERE "enable" = true
        ORDER BY COALESCE("order_num", -1), id DESC
    </select>

    <select id="selectMaxId" resultType="java.lang.Integer">
        SELECT MAX(id) FROM storage_source
    </select>

    <select id="findByType" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" /> FROM storage_source WHERE <include refid="Column_Type"/> = #{type,jdbcType=VARCHAR}
    </select>

    <update id="updateSetOrderNumById">
        UPDATE storage_source SET <include refid="Column_OrderNum"/> = #{orderNum} WHERE id = #{id}
    </update>

    <select id="findByStorageKey" resultMap="BaseResultMap">
        SELECT <include refid="Base_Column_List" /> 
        FROM storage_source 
        WHERE <include refid="Column_Key"/> = #{storageKey,jdbcType=VARCHAR}
    </select>

    <select id="findIdByStorageKey" resultType="java.lang.Integer">
        SELECT 
            <choose>
                <when test="_databaseId == 'postgresql'">"id"</when>
                <otherwise>`id`</otherwise>
            </choose>
        FROM storage_source 
        WHERE <include refid="Column_Key"/> = #{storageKey,jdbcType=VARCHAR}
    </select>

<!--auto generated by MybatisCodeHelper on 2022-06-13-->
  <select id="findKeyById" resultType="java.lang.String">
      SELECT
      <choose>
          <when test="_databaseId == 'postgresql'">"key"</when>
          <otherwise>`key`</otherwise>
      </choose>
      FROM storage_source
      WHERE
      <choose>
          <when test="_databaseId == 'postgresql'">"id"</when>
          <otherwise>`id`</otherwise>
      </choose>
      = #{id,jdbcType=INTEGER}
    </select>


    <!--    <select id="findListByEnableOrderByOrderNum" resultMap="BaseResultMap">-->
    <!--        &lt;!&ndash;select <include refid="Base_Column_List" /> from storage_source where enable = true order by ifnull(order_num, -1), id desc&ndash;&gt;-->
    <!--        SELECT <include refid="Base_Column_List" />-->
    <!--        FROM storage_source-->
    <!--        WHERE <include refid="Column_Enable"/> = true-->
    <!--        ORDER BY <include refid="Func_IfNull"/>(<include refid="Column_OrderNum"/>, -1), id DESC-->
    <!--    </select>-->

    <!--&lt;!&ndash;auto generated by MybatisCodeHelper on 2021-07-15&ndash;&gt;-->
    <!--    <select id="findAllOrderByOrderNum" resultMap="BaseResultMap">-->
    <!--        select-->
    <!--        <include refid="Base_Column_List" />-->
    <!--        from storage_source order by ifnull(order_num, -1), id desc-->
    <!--    </select>-->

    <!--    <select id="selectMaxId" resultType="java.lang.Integer">-->
    <!--        select max(id) max from storage_source-->
    <!--    </select>-->

    <!--&lt;!&ndash;auto generated by MybatisCodeHelper on 2021-07-15&ndash;&gt;-->
    <!--    <select id="findByType" resultMap="BaseResultMap">-->
    <!--        select-->
    <!--        <include refid="Base_Column_List" />-->
    <!--        from storage_source-->
    <!--        where `type`=#{type,jdbcType=VARCHAR}-->
    <!--    </select>-->

    <!--    <update id="updateSetOrderNumById">-->
    <!--        update storage_source set order_num = #{orderNum} where id = #{id}-->
    <!--    </update>-->

    <!--  <select id="findByStorageKey" resultMap="BaseResultMap">-->
    <!--      select-->
    <!--      <include refid="Base_Column_List" />-->
    <!--      from storage_source-->
    <!--      where `key`=#{storageKey,jdbcType=VARCHAR}-->
    <!--    </select>-->

    <!--  <select id="findIdByStorageKey" resultType="java.lang.Integer">-->
    <!--      select id from storage_source where `key`=#{storageKey,jdbcType=VARCHAR}-->
    <!--    </select>-->

    <!-- 添加一个用于插入的列名列表 SQL 片段 -->
    <sql id="Insert_Column_List">
        <choose>
            <when test="_databaseId == 'postgresql'">
                "enable", "enable_file_operator", "enable_file_anno_operator", "enable_cache", "name",
                "remark", "auto_refresh_cache", "type", "search_enable", "search_ignore_case", "search_mode",
                "default_switch_to_img_mode", "compatibility_readme"
            </when>
            <otherwise>
                `enable`, `enable_file_operator`, `enable_file_anno_operator`, `enable_cache`, `name`,
                `remark`, `auto_refresh_cache`, `type`, `search_enable`, `search_ignore_case`, `search_mode`,
                `default_switch_to_img_mode`, `compatibility_readme`
            </otherwise>
        </choose>
    </sql>

    <!-- 修改 insert 语句 -->
    <insert id="insert" parameterType="im.zhaojun.zfile.module.storage.model.entity.StorageSource" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO storage_source (
            <include refid="Insert_Column_List"/>
        ) VALUES (
            #{enable}, #{enableFileOperator}, #{enableFileAnnoOperator}, #{enableCache}, #{name},
            #{remark}, #{autoRefreshCache}, #{type}, #{searchEnable}, #{searchIgnoreCase}, #{searchMode},
            #{defaultSwitchToImgMode}, #{compatibilityReadme}
        )
    </insert>
</mapper>